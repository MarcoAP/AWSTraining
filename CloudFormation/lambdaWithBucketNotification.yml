Parameters:
  LambdaDescription:
    Description: This Lambda Function will move Text files
    Type: String
    Default: This Lambda Function will move Text files

  LambdaName:
    Description: This Lambda Function will move Text files
    Type: String
    Default: lambda-movefiles

  CodeUriBucket:
    Description: The name of the bucket with the script for Lambda
    Type: String
    Default: bucket-scripts-training-2021

  CodeUriKey:
    Description: The lambda script file
    Type: String
    Default: "scripts/lambda/lambda_function.zip"

  FunctionHandler:
    Description: The main method to start the things
    Type: String
    Default: lambda_function.lambda_handler

  MemorySize:
    Description: The size of memory in MB
    Type: String
    Default: 128

  FunctionRuntime:
    Description: Program language for this Lambda Function
    Type: String
    Default: python3.7

  LambdaTimeout:
    Description: Timeout Lambda
    Type: String
    Default: 500

  BucketRaw:
    Description: The ARN of the bucket Raw
    Type: String
    Default: bucket-raw-training-2021

  BucketScripts:
    Description: The ARN of the bucket Raw
    Type: String
    Default: bucket-scripts-training-2021

  BucketArchive:
    Description: The ARN of the bucket Archive
    Type: String
    Default: bucket-archive-training-2021

  ENV:
    Description: Develop Environment
    Type: String
    Default: DEVELOP_ENVIRONMENT

  PrivateSubnet1:
    Description: Getting the private 1 subnet in another Stack/CloudFormation
    Type: String
    Default: "subnet-0eda03247f9bdd749"

  PrivateSubnet2:
    Description: Getting the private 2 subnet in another Stack/CloudFormation
    Type: String
    Default: "subnet-0b79837507686ef12"

  SecurityGroup:
    Description: The security group
    Type: String
    Default: sg-0018e9d1e66f9c925

  ReservedConcurrentExecutions:
    Type: String
    Default: 1


Resources:
  LambdaMoveFiles:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref CodeUriBucket
        S3Key: !Ref CodeUriKey
      Description: !Ref LambdaDescription
      Environment:
        Variables:
          BUCKET_RAW: !Ref BucketRaw
          BUCKET_ARCHIVE: !Ref BucketArchive
          POWERTOOLS_SERVICE_NAME: !Ref LambdaName
          ENV: !Ref ENV
      FunctionName: !Ref LambdaName
      Handler: !Ref FunctionHandler
      MemorySize: !Ref MemorySize
      ReservedConcurrentExecutions: !Ref ReservedConcurrentExecutions
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref FunctionRuntime
      Tags:
        - Key: Name
          Value: !Ref LambdaName
      Timeout: !Ref LambdaTimeout
      VpcConfig:
        SecurityGroupIds: 
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  LambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                  - s3:Delete*
                  - s3:Copy*
                  - glue:Get*
                  - glue:BatchGet*
                  - glue:CreateWorkflow
                  - glue:DeleteWorkflow
                  - glue:PutWorkflowRunProperties
                  - glue:StartWorkflowRun
                  - glue:UpdateWorkflow
                  - logs:CreateLogStream
                  - logs:PutLogEvents                  
                Resource:
                  - !Sub arn:aws:s3:::${BucketRaw}
                  - !Sub arn:aws:s3:::${BucketRaw}/*
        - PolicyName: VPC
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - glue:Get*
                  - glue:BatchGet*
                  - glue:CreateWorkflow
                  - glue:DeleteWorkflow
                  - glue:PutWorkflowRunProperties
                  - glue:StartWorkflowRun
                  - glue:UpdateWorkflow            
                Resource: '*'  

  Asyncconfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref LambdaName
      MaximumRetryAttempts: 0
      Qualifier: $LATEST
    DependsOn: LambdaMoveFiles

  LambdaPermissionNotification:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaMoveFiles.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BucketRaw}
    DependsOn: LambdaMoveFiles
  
  BucketRawData:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketName: !Ref BucketRaw
      VersioningConfiguration:
        Status: Suspended
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 90
                StorageClass: GLACIER
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: input/
                  - Name: suffix
                    Value: .csv
            Function: !GetAtt LambdaMoveFiles.Arn
      Tags:
        - Key: Name
          Value: Bucket Raw
    DependsOn: LambdaPermissionNotification

############################################################################################
#
# Observation: to work well this Lambda CloudFormation you need already created the bucket
# with your scripts files, like this example in:
# s3://bucket-scripts-training-2021/scripts/lambda/lambda_function.zip
#
# In addition, you need ZIP your codes firstly and upload
#
############################################################################################
